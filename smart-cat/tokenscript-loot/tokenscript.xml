<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ts:token xmlns:ts="http://tokenscript.org/2022/09/tokenscript"
		  xmlns:xml="http://www.w3.org/XML/1998/namespace"
		  xsi:schemaLocation="http://tokenscript.org/2022/09/tokenscript http://tokenscript.org/2022/09/tokenscript.xsd"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xmlns:ethereum="urn:ethereum:constantinople"
		  xmlns:xhmtl="http://www.w3.org/1999/xhtml"
		  name="SmartCatLoot">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">SmartCat Loot</ts:string>
			<ts:string quantity="other">SmartCats Loots</ts:string>
		</ts:plurals>
	</ts:label>

	<ts:meta>
		<ts:description xml:lang="en">Adopt a cat and boost their intelligence through fun care tasks.</ts:description>
		<ts:aboutUrl xml:lang="en">https://medium.com/alphawallet/the-smart-cat-is-out-of-the-bag-b631d2588de2</ts:aboutUrl>
	</ts:meta>

	<ts:contract name="SmartCatLoot">
		<!-- local-testing: <ts:address network="31337">0x9A676e781A523b5d0C0e43731313A708CB607508</ts:address> -->
		<!-- polygon mumbai: <ts:address network="80001">0x3F1108368CBa706990590d15ce7ADDEE8224203B</ts:address> -->
		<ts:address network="80001">0x3F1108368CBa706990590d15ce7ADDEE8224203B</ts:address>
		<ts:abi>
			<![CDATA[
			[
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "target",
					  "type": "address"
					}
				  ],
				  "name": "AddressEmptyCode",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "account",
					  "type": "address"
					}
				  ],
				  "name": "AddressInsufficientBalance",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "CatAlreadyPlayedWithToy",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "sender",
					  "type": "address"
					},
					{
					  "internalType": "uint256",
					  "name": "tokenId",
					  "type": "uint256"
					},
					{
					  "internalType": "address",
					  "name": "owner",
					  "type": "address"
					}
				  ],
				  "name": "ERC721IncorrectOwner",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "operator",
					  "type": "address"
					},
					{
					  "internalType": "uint256",
					  "name": "tokenId",
					  "type": "uint256"
					}
				  ],
				  "name": "ERC721InsufficientApproval",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "approver",
					  "type": "address"
					}
				  ],
				  "name": "ERC721InvalidApprover",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "operator",
					  "type": "address"
					}
				  ],
				  "name": "ERC721InvalidOperator",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "owner",
					  "type": "address"
					}
				  ],
				  "name": "ERC721InvalidOwner",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "receiver",
					  "type": "address"
					}
				  ],
				  "name": "ERC721InvalidReceiver",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "sender",
					  "type": "address"
					}
				  ],
				  "name": "ERC721InvalidSender",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "uint256",
					  "name": "tokenId",
					  "type": "uint256"
					}
				  ],
				  "name": "ERC721NonexistentToken",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "ExistingTokenRequired",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "FailedInnerCall",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "IndexOutOfBounds",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "InvalidInitialization",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "InvalidSignature",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "MintLimitReached",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "MintingNotStarted",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "uint256",
					  "name": "tokenId",
					  "type": "uint256"
					}
				  ],
				  "name": "NeedToOwnTheToy",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "NonZeroBalanceRequired",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "NotInitializing",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "OnlyForSmartCatHolders",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "OnlyOneToyMintAllowed",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "OnlyOneToyMintPerCatAllowed",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "owner",
					  "type": "address"
					}
				  ],
				  "name": "OwnableInvalidOwner",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "account",
					  "type": "address"
					}
				  ],
				  "name": "OwnableUnauthorizedAccount",
				  "type": "error"
				},
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "token",
					  "type": "address"
					}
				  ],
				  "name": "SafeERC20FailedOperation",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "SmartCatMustBeAdoptedToMint",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "WethNotAllowed",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "WrongSigner",
				  "type": "error"
				},
				{
				  "inputs": [],
				  "name": "ZeroAddressCantBeOwner",
				  "type": "error"
				}
			]
		]]>
		</ts:abi>
	</ts:contract>

	<ts:origins>
		<!-- Define the contract which holds the token that the user will use -->
		<ts:ethereum contract="SmartCatLoot"/>
	</ts:origins>

	<ts:cards>
		<ts:viewContent name="common" xmlns="http://www.w3.org/1999/xhtml">
			<ts:include type="html" src="./dist/index.html"/>
			<ts:include type="css" src="./src/styles.css"/>
		</ts:viewContent>

		<ts:card type="token" name="Info" origins="SmartCatLoot">
			<ts:label>
				<ts:string xml:lang="en">Loot Info</ts:string>
			</ts:label>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" urlFragment="info">
				<ts:viewContent name="common"/>
			</ts:view>
		</ts:card>

		<ts:card type="action" name="Play" origins="SmartCatLoot">
			<ts:label>
				<ts:string xml:lang="en">Play with Smart Cat</ts:string>
			</ts:label>
			<ts:attribute name="catId">
				<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
				<ts:origins>
					<ts:user-entry as="uint" />
				</ts:origins>
			</ts:attribute>
			<ts:transaction>
				<ethereum:transaction as="uint" contract="SmartCatLoot" function="play">
					<ts:data>
						<ts:uint256 ref="tokenId"/>
						<ts:uint256 local-ref="catId"/>
					</ts:data>
				</ethereum:transaction>
			</ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" urlFragment="play">
				<ts:viewContent name="common"/>
			</ts:view>
		</ts:card>

		<ts:card type="action" name="Burn" origins="SmartCatLoot">
			<ts:label>
				<ts:string xml:lang="en">Burn</ts:string>
			</ts:label>
			<ts:attribute name="invitee">
				<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
				<ts:origins>
					<ts:user-entry as="uint" />
				</ts:origins>
			</ts:attribute>
			<ts:transaction>
				<ethereum:transaction as="uint" contract="SmartCatLoot" function="burn">
					<ts:data>
						<ts:uint256 ref="tokenId"/>
					</ts:data>
				</ethereum:transaction>
			</ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" urlFragment="burn">
				<ts:viewContent name="common"/>
			</ts:view>
		</ts:card>

	</ts:cards>

	<ts:attribute name="points">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:label>
			<ts:string xml:lang="en">SmartLayer Points</ts:string>
		</ts:label>
		<ts:origins>
			<ethereum:call function="pointsBalance" contract="SmartCatLoot" as="uint">
				<ts:data>
					<ts:uint256 ref="tokenId"/>
				</ts:data>
			</ethereum:call>
		</ts:origins>
	</ts:attribute>

	<ts:attribute name="maticPayout">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:label>
			<ts:string xml:lang="en">Matic Payout</ts:string>
		</ts:label>
		<ts:origins>
			<ethereum:call function="maticPayout" contract="SmartCatLoot" as="uint">
				<ts:data/>
			</ethereum:call>
		</ts:origins>
	</ts:attribute>

	<ts:attribute name="wethPayout">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:label>
			<ts:string xml:lang="en">wETH Payout</ts:string>
		</ts:label>
		<ts:origins>
			<ethereum:call function="wethPayout" contract="SmartCatLoot" as="uint">
				<ts:data/>
			</ethereum:call>
		</ts:origins>
	</ts:attribute>

</ts:token>
